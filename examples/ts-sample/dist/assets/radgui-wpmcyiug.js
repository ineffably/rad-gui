import{R as S}from"./index-CAGXO9Yg.js";class x{constructor(){this.animationId=null,this.initializeDemoObject(),this.initializeElements(),this.setupRadGUI(),this.startAnimation(),this.setupEventListeners()}initializeDemoObject(){this.demoObject={boxSize:120,rotation:0,opacity:1,backgroundColor:"#4ecdc4",borderColor:"#ff6b6b",borderWidth:3,borderRadius:8,animationSpeed:1,enableAnimation:!0,autoRotate:!1,animationType:"bounce",boxText:"RadGUI",showShadow:!0,shadowIntensity:.3,cssFilter:"none",transform3D:!1,perspective:1e3,health:100,level:1,playerName:"Player 1",difficulty:"normal",debugMode:!1,showStats:!1}}initializeElements(){if(this.box=document.getElementById("animated-box"),this.statusElement=document.getElementById("status"),!this.box||!this.statusElement)throw new Error("Required DOM elements not found")}setupRadGUI(){this.radGui=new S({title:"RadGUI Demo Controls",width:300});const e=this.radGui.addFolder("🎨 Appearance");e.addNumber(this.demoObject,"boxSize",50,200,5).name("Box Size").onChange(()=>this.updateBox()),e.addNumber(this.demoObject,"opacity",0,1,.05).name("Opacity").onChange(()=>this.updateBox()),e.addColor(this.demoObject,"backgroundColor").name("Background Color").onChange(()=>this.updateBox()),e.addColor(this.demoObject,"borderColor").name("Border Color").onChange(()=>this.updateBox()),e.addNumber(this.demoObject,"borderWidth",0,10,1).name("Border Width").onChange(()=>this.updateBox()),e.addNumber(this.demoObject,"borderRadius",0,50,1).name("Border Radius").onChange(()=>this.updateBox());const t=this.radGui.addFolder("🎬 Animation");t.addNumber(this.demoObject,"rotation",0,360,1).name("Rotation (°)").onChange(()=>this.updateBox()),t.addNumber(this.demoObject,"animationSpeed",.1,5,.1).name("Animation Speed").onChange(()=>this.updateBox()),t.addToggle(this.demoObject,"enableAnimation").name("Enable Animation").onChange(()=>this.toggleAnimation()),t.addToggle(this.demoObject,"autoRotate").name("Auto Rotate").onChange(()=>this.updateBox()),t.addOption(this.demoObject,"animationType",{Bounce:"bounce",Pulse:"pulse",Swing:"swing",Wobble:"wobble"}).name("Animation Type").onChange(()=>this.updateBox());const o=this.radGui.addFolder("✨ Effects");o.addText(this.demoObject,"boxText").name("Display Text").onChange(()=>this.updateBox()),o.addToggle(this.demoObject,"showShadow").name("Show Shadow").onChange(()=>this.updateBox()),o.addNumber(this.demoObject,"shadowIntensity",0,1,.1).name("Shadow Intensity").onChange(()=>this.updateBox()),o.addOption(this.demoObject,"cssFilter",["none","blur(2px)","brightness(1.5)","contrast(1.5)","grayscale(50%)","hue-rotate(90deg)","sepia(50%)"]).name("CSS Filter").onChange(()=>this.updateBox());const s=this.radGui.addFolder("🎮 Game Properties");s.addNumber(this.demoObject,"health",0,100,1).name("Health Points").onChange(a=>this.logChange("Health",a.value)),s.addNumber(this.demoObject,"level",1,50,1).name("Player Level").onChange(a=>this.logChange("Level",a.value)),s.addText(this.demoObject,"playerName").name("Player Name").onChange(a=>this.logChange("Player Name",a.value)),s.addOption(this.demoObject,"difficulty",["easy","normal","hard","expert"]).name("Difficulty").onChange(a=>this.logChange("Difficulty",a.value));const i=this.radGui.addFolder("🚀 Actions");i.addButton("Reset All Settings",()=>this.resetSettings()).name("🔄 Reset Everything"),i.addButton("Randomize Colors",()=>this.randomizeColors()).name("🎨 Random Colors"),i.addButton("Toggle Animation",()=>this.toggleAnimation()).name("⏯️ Toggle Animation"),i.addButton("Save Settings",()=>this.saveSettings()).name("💾 Save Settings"),i.addButton("Load Settings",()=>this.loadSettings()).name("📁 Load Settings"),i.addButton("Export State",()=>this.exportState()).name("📤 Export State");const n=this.radGui.addFolder("🐛 Debug");n.addToggle(this.demoObject,"debugMode").name("Debug Mode").onChange(()=>this.toggleDebugMode()),n.addToggle(this.demoObject,"showStats").name("Show Stats").onChange(()=>this.updateBox()),n.addButton("Log Current State",()=>this.logCurrentState()).name("📊 Log State"),n.addButton("Test All Controls",()=>this.testAllControls()).name("🧪 Test Controls"),this.radGui.onChange(a=>{this.updateStatus(`${a.property} → ${a.value}`)}),this.radGui.onFinishChange(a=>{this.logChange("Final",`${a.property} = ${a.value}`)}),this.radGui.onOpenClose(a=>{console.log("Folder toggled:",a._title)})}updateBox(){if(!this.box)return;const{boxSize:e,rotation:t,opacity:o,backgroundColor:s,borderColor:i,borderWidth:n,borderRadius:a,boxText:m,showShadow:c,shadowIntensity:r,cssFilter:l,transform3D:b,perspective:g}=this.demoObject;this.box.style.width=e+"px",this.box.style.height=e+"px",this.box.style.opacity=o.toString(),this.box.style.backgroundColor=s,this.box.style.borderColor=i,this.box.style.borderWidth=n+"px",this.box.style.borderStyle="solid",this.box.style.borderRadius=a+"px",this.box.textContent=m;let h=`rotate(${t}deg)`;if(String(b).toLowerCase()==="true"&&(h+=` perspective(${g}px) rotateX(15deg)`),this.box.style.transform=h,c){const u=Math.round(r*20),p=`rgba(0, 0, 0, ${r})`;this.box.style.boxShadow=`0 ${u}px ${u*2}px ${p}`}else this.box.style.boxShadow="none";this.box.style.filter=l==="none"?"":l,this.box.className=`animated-box animation-${this.demoObject.animationType}`}startAnimation(){const e=()=>{var t;this.demoObject.enableAnimation&&this.demoObject.autoRotate&&(this.demoObject.rotation=(this.demoObject.rotation+this.demoObject.animationSpeed)%360,(t=this.radGui.controllersRecursive().find(o=>o.property==="rotation"))==null||t.updateDisplay(),this.updateBox()),this.animationId=requestAnimationFrame(e)};e()}toggleAnimation(){this.updateStatus(this.demoObject.enableAnimation?"Animation enabled":"Animation disabled")}resetSettings(){Object.assign(this.demoObject,{boxSize:120,rotation:0,opacity:1,backgroundColor:"#4ecdc4",borderColor:"#ff6b6b",borderWidth:3,borderRadius:8,animationSpeed:1,enableAnimation:!0,autoRotate:!1,animationType:"bounce",boxText:"RadGUI",showShadow:!0,shadowIntensity:.3,cssFilter:"none",health:100,level:1,playerName:"Player 1",difficulty:"normal"}),this.radGui.controllersRecursive().forEach(e=>{e.updateDisplay()}),this.updateBox(),this.updateStatus("Settings reset to defaults")}randomizeColors(){const e=["#ff6b6b","#4ecdc4","#45b7d1","#f9ca24","#f0932b","#eb4d4b","#6c5ce7"];this.demoObject.backgroundColor=e[Math.floor(Math.random()*e.length)],this.demoObject.borderColor=e[Math.floor(Math.random()*e.length)],this.radGui.controllersRecursive().filter(t=>t.property==="backgroundColor"||t.property==="borderColor").forEach(t=>t.updateDisplay()),this.updateBox(),this.updateStatus("Colors randomized!")}saveSettings(){const e={...this.demoObject};localStorage.setItem("radgui-demo-settings",JSON.stringify(e)),this.updateStatus("Settings saved to localStorage")}loadSettings(){const e=localStorage.getItem("radgui-demo-settings");if(e)try{const t=JSON.parse(e);Object.assign(this.demoObject,t),this.radGui.controllersRecursive().forEach(o=>{o.updateDisplay()}),this.updateBox(),this.updateStatus("Settings loaded from localStorage")}catch{this.updateStatus("Error loading settings")}else this.updateStatus("No saved settings found")}exportState(){const e={timestamp:new Date().toISOString(),version:"1.0.0",settings:{...this.demoObject}},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),o=URL.createObjectURL(t),s=document.createElement("a");s.href=o,s.download="radgui-demo-export.json",s.click(),URL.revokeObjectURL(o),this.updateStatus("State exported as JSON file")}toggleDebugMode(){this.demoObject.debugMode?(console.log("Debug mode enabled"),console.log("Current state:",this.demoObject),this.box.style.outline="2px dashed red"):(console.log("Debug mode disabled"),this.box.style.outline="none"),this.updateStatus(`Debug mode ${this.demoObject.debugMode?"enabled":"disabled"}`)}logCurrentState(){console.group("🐛 RadGUI Demo State"),console.log("Demo Object:",this.demoObject),console.log("GUI Controllers:",this.radGui.controllersRecursive().length),console.log("GUI Folders:",this.radGui.foldersRecursive().length),console.groupEnd(),this.updateStatus("State logged to console")}testAllControls(){const e=this.radGui.controllersRecursive();let t=0;e.forEach((o,s)=>{setTimeout(()=>{o.property==="boxSize"?o.setValue(Math.random()*150+50):o.property==="rotation"?o.setValue(Math.random()*360):o.property==="opacity"&&o.setValue(Math.random()*.5+.5),t++,this.updateStatus(`Testing controls... ${t}/${e.length}`),t===e.length&&setTimeout(()=>{this.updateStatus("All controls tested!")},500)},s*100)})}setupEventListeners(){document.addEventListener("keydown",e=>{if(e.ctrlKey||e.metaKey)switch(e.key){case"r":e.preventDefault(),this.resetSettings();break;case"s":e.preventDefault(),this.saveSettings();break;case"l":e.preventDefault(),this.loadSettings();break}}),this.box.addEventListener("click",()=>{this.randomizeColors()})}updateStatus(e){this.statusElement&&(this.statusElement.textContent=`${new Date().toLocaleTimeString()}: ${e}`)}logChange(e,t){console.log(`🎛️ ${e} changed:`,t)}getRadGUI(){return this.radGui}destroy(){this.animationId&&cancelAnimationFrame(this.animationId),this.radGui.destroy()}}document.addEventListener("DOMContentLoaded",()=>{const d=new x;window.radGuiDemo=d,console.log("🎛️ RadGUI TypeScript Demo initialized!"),console.log("Available methods: resetSettings(), randomizeColors(), saveSettings(), loadSettings()"),console.log("Keyboard shortcuts: Ctrl+R (reset), Ctrl+S (save), Ctrl+L (load)")});
