import BaseControl from './base-control';
export default class NumberControl extends BaseControl {
    _decimals: any;
    _min: any;
    _max: any;
    _step: any;
    _stepExplicit: boolean;
    _hasSlider: any;
    _inputFocused: boolean;
    $input: HTMLInputElement;
    $slider: HTMLDivElement;
    $fill: HTMLDivElement;
    get _hasScrollBar(): boolean;
    get _hasMin(): boolean;
    get _hasMax(): boolean;
    max: (max: any) => this;
    min: (min: any) => this;
    step: (step: any, explicit?: boolean) => this;
    decimals: (decimals: any) => this;
    constructor(parent: any, object: any, property: any, min?: any, max?: any, step?: any);
    setDecimals(decimals: any): this;
    setMin(min: any): this;
    setMax(max: any): this;
    setStep(step: any, explicit?: boolean): this;
    update(): this;
    _getImplicitStep(): number;
    _onUpdateMinMax(): void;
    _setDraggingStyle(active: any, axis?: string): void;
    _normalizeMouseWheel(e: any): any;
    _arrowKeyMultiplier(e: any): number;
    _snap(value: any): number;
    _clamp(value: any): any;
    _snapClampSetValue(value: any): void;
    _initInput(): void;
    _initSlider(): void;
    _handleInput(): void;
    _handleKeyDown(e: any): void;
    _handleInputWheel(e: any): void;
    _incrementValue(delta: any): void;
    _handleSliderMouseDown(e: any): void;
    _handleSliderMouseMove(e: any): void;
    _handleSliderTouchStart(e: any): void;
    _beginTouchDrag(e: any): void;
    _cleanupTouchEvents(moveHandler: any, endHandler: any): void;
    _handleSliderWheel(e: any): void;
    _setValueFromClientX(clientX: any): void;
    _mapRange(v: any, a: any, b: any, c: any, d: any): any;
    private _wheelFinishTimeout;
}
