export default class BaseControl {
    parent: any;
    object: any;
    property: any;
    initialValue: any;
    domElement: HTMLElement;
    $name: HTMLDivElement;
    static nextNameID: any;
    $widget: HTMLDivElement;
    $elForDisable: any;
    _disabled: boolean;
    _hidden: boolean;
    _name: any;
    _onChange: any;
    _changed: boolean;
    _onFinishChange: any;
    _listening: boolean;
    _listenCallbackID: any;
    _listenPrevValue: any;
    constructor(parent: any, object: Record<string, any>, property: string, className: string, elementType?: keyof HTMLElementTagNameMap);
    name(name: string): this;
    onChange(callback: (data: { object: any; property: string; value: any; controller: any }) => void): this;
    _callOnChange(): void;
    onFinishChange(callback: (data: { object: any; property: string; value: any; controller: any }) => void): this;
    _callOnFinishChange(): void;
    reset(): this;
    enable(enabled?: boolean): this;
    disable(disabled?: boolean): this;
    show(show?: boolean): this;
    hide(): this;
    options(options: any): any;
    setMin(min: any): this;
    setMax(max: any): this;
    setStep(step: any): this;
    setDecimals(decimals: any): this;
    listen(listen?: boolean): this;
    _listenCallback(): void;
    getValue(): any;
    setValue(value: any): this;
    updateDisplay(): this;
    update(): this;
    load(value: any): this;
    save(): any;
    destroy(): void;
}
export { BaseControl };
