name: Build

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    # Generate and extract coverage percentage
    - name: Extract Coverage Percentage
      id: extract_coverage
      run: |
        COVERAGE=$(node -e "const fs=require('fs'); const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json')); console.log(coverage.total.statements.pct)")
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE%"
        
    # Output the coverage as a job summary
    - name: Output Coverage Summary
      run: |
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "Total Statement Coverage: ${{ env.COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
    
    # Create and commit the coverage badge directly to the default branch
    - name: Generate Coverage Badge
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
      run: |
        # Create badges directory if it doesn't exist
        mkdir -p badges
        
        # Get coverage percentage from the coverage summary
        COV="${{ env.COVERAGE }}"
        
        # Determine badge color based on coverage
        if (( $(echo "$COV >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COV >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COV >= 70" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$COV >= 60" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        # Generate SVG badge
        BADGE_SVG="<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"103.3\" height=\"20\" viewBox=\"0 0 1033 200\" role=\"img\" aria-label=\"coverage: ${COV}%\"><title>coverage: ${COV}%</title><linearGradient id=\"Geyyl\" x2=\"0\" y2=\"100%\"><stop offset=\"0\" stop-opacity=\".1\" stop-color=\"#EEE\"/><stop offset=\"1\" stop-opacity=\".1\"/></linearGradient><mask id=\"ONGBh\"><rect width=\"1033\" height=\"200\" rx=\"30\" fill=\"#FFF\"/></mask><g mask=\"url(#ONGBh)\"><rect width=\"603\" height=\"200\" fill=\"#555\"/><rect width=\"430\" height=\"200\" fill=\"${COLOR}\" x=\"603\"/><rect width=\"1033\" height=\"200\" fill=\"url(#Geyyl)\"/></g><g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\"><text x=\"60\" y=\"148\" textLength=\"503\" fill=\"#000\" opacity=\".25\">coverage</text>    <text x=\"50\" y=\"138\" textLength=\"503\">coverage</text><text x=\"658\" y=\"148\" textLength=\"330\" fill=\"#000\" opacity=\".25\">${COV}%</text><text x=\"648\" y=\"138\" textLength=\"330\">${COV}%</text></g></svg>"

        # Save the badge
        echo "$BADGE_SVG" > badges/coverage.svg
        
        # Commit and push if there are changes
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add badges/coverage.svg
        git commit -m "Update coverage badge [skip ci]" || echo "No changes to commit"
        git push
      
    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7
    
    - name: Build
      run: npm run build
    
    - name: Create package
      run: npm pack
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: rad-gui-*.tgz
        retention-days: 7
        
    # Create GitHub Release when a tag is pushed
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      id: create_release
      run: |
        # Extract version from tag (remove the 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        TODAY=$(date +"%Y-%m-%d")
        
        # Read the package.json version to verify it matches the tag
        PKG_VERSION=$(node -e "console.log(require('./package.json').version)")
        
        if [ "$VERSION" != "$PKG_VERSION" ]; then
          echo "Warning: Tag version ($VERSION) does not match package.json version ($PKG_VERSION)"
        fi
        
        # Extract changes since the last release for the changelog
        if [ -f CHANGELOG.md ]; then
          # Update CHANGELOG.md with the new release
          # Check if this version already has an entry
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            # Get commits since last tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "Generating changelog from $PREVIOUS_TAG to v$VERSION"
              
              # Prepare changelog entry
              CHANGELOG_ENTRY="## [$VERSION] - $TODAY\n\n"
              
              # Get conventional commits and group them
              FEATURES=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"%s" | grep -E "^feat(\([^)]+\))?:" | sed 's/^feat\([^)]*\): /- /')
              FIXES=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"%s" | grep -E "^fix(\([^)]+\))?:" | sed 's/^fix\([^)]*\): /- /')
              CHANGES=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"%s" | grep -E "^change(\([^)]+\))?:|^refactor(\([^)]+\))?:" | sed 's/^change\([^)]*\): /- /' | sed 's/^refactor\([^)]*\): /- /')
              
              # Add sections with content to the changelog entry
              if [ -n "$FEATURES" ]; then
                CHANGELOG_ENTRY="${CHANGELOG_ENTRY}### Added\n${FEATURES}\n\n"
              fi
              
              if [ -n "$FIXES" ]; then
                CHANGELOG_ENTRY="${CHANGELOG_ENTRY}### Fixed\n${FIXES}\n\n"
              fi
              
              if [ -n "$CHANGES" ]; then
                CHANGELOG_ENTRY="${CHANGELOG_ENTRY}### Changed\n${CHANGES}\n\n"
              fi
              
              # Add comparison link
              PREVIOUS_VERSION=${PREVIOUS_TAG#v}
              LINK_ENTRY="[$VERSION]: https://github.com/ineffably/rad-gui/compare/v$PREVIOUS_VERSION...v$VERSION\n"
              
              # Insert at the top of the file, after the header
              sed -i "5s/^/\n$CHANGELOG_ENTRY$LINK_ENTRY/" CHANGELOG.md
              
              # Commit the updated changelog
              git add CHANGELOG.md
              git commit -m "Update CHANGELOG.md for v$VERSION [skip ci]"
              git push
            fi
          fi
        fi
        
        # Read the latest release notes from CHANGELOG.md
        CHANGELOG_SECTION=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
        
        # Create a GitHub release with the changelog
        gh release create v$VERSION \
          --title "Release v$VERSION" \
          --notes "$CHANGELOG_SECTION" \
          rad-gui-*.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 